{"ast":null,"code":"import { firestore } from \"../../firebase\";\nconst board_db = firestore.collection(\"board\"); // configStore.js 만들고 firebase 설치 후 import 시키고 firestore 대쉬보드의 collection 가져오고는 이해함.\n// 리덕스 모듈에서 파이어베이스 호출하고, 리듀서 수정하고, 컴포넌트에 연결하고 하는 순서는 알 거 같다. \n// loadBoardFB라는 호출 함수 강의자료에 맞게 코드 작성하고 위의 순서에 맞게 잘한 거 같은데 에러의 원인을 모르겠다.\n// loadBoardFB로 호출하면 initialstate의 board_list는 삭제해도 될까요? \n// Actions\n\nconst LOAD = \"board/LOAD\";\nconst CREATE = \"board/CREATE\";\nconst DELETE = \"board/DELETE\";\nconst UPDATE = \"board/UPDATE\";\nconst initialState = {\n  board_list: []\n}; // Action Creators\n\nexport const loadBoard = board => {\n  return {\n    type: LOAD,\n    board\n  };\n};\nexport const createBoard = board => {\n  return {\n    type: CREATE,\n    board\n  };\n};\nexport const deleteBoard = board => {\n  return {\n    type: DELETE,\n    board\n  };\n};\nexport const updateBoard = board => {\n  return {\n    type: UPDATE,\n    board\n  };\n}; // .orderBy(\"board_id\", \"desc\")\n\nexport const loadBoardFB = () => {\n  return function (dispatch) {\n    board_db.get().then(docs => {\n      let board_data = [];\n      docs.forEach(doc => {\n        console.log(doc.data());\n\n        if (doc.exists) {\n          board_data = [...board_data, {\n            id: doc.id,\n            ...doc.data()\n          }]; // board_data = [...board_data, { ...doc.data() }];\n        }\n      });\n      console.log(board_data, 'loadBoardFB');\n      dispatch(loadBoard(board_data)); // console.log(getState().board);\n    });\n  };\n};\nexport const addBoardFB = board => {\n  return function (dispatch) {\n    // console.log(board);\n    let board_data = { ...board,\n      completed: false\n    };\n    console.log(board_data);\n    board_db.add(board_data).then(docRef => {\n      board_data = { ...board_data,\n        id: docRef.id\n      };\n      dispatch(createBoard(board_data));\n    });\n  };\n};\nexport const deleteBoardFB = board => {\n  return function (dispatch, getState) {\n    const _board_data = getState().board.board_list[board];\n\n    if (!_board_data.id) {\n      return;\n    }\n\n    board_db.doc(_board_data.id).delete().then(docRef => {\n      dispatch(deleteBoard(board));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const updateBoardFB = (board, index) => {\n  return function (dispatch, getState) {\n    console.log(board, index);\n    const _board_data = getState().board.board_list[index];\n    let board_data = { ..._board_data\n    };\n    console.log(board_data); // _bucket_data.id가 이 함수에서 나가라 끝내라\n\n    if (!_board_data.id) {\n      return;\n    }\n\n    const result = {\n      title: board.title,\n      name: board.name,\n      contents: board.contents,\n      completed: true\n    };\n    console.log(result);\n    console.log(_board_data.id);\n    board_db.doc(_board_data.id).update(result).then(docRef => {\n      dispatch(updateBoard(index));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // Reducer\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"board/LOAD\":\n      {\n        console.log(action.board);\n\n        if (action.board.length > 0) {\n          return {\n            board_list: action.board\n          };\n        }\n\n        return state;\n      }\n    // new_board_list처럼 action...과 state 순서 바꾸었더니 메인페이지에서 최신순으로 잘 나왔습니다. 이유가 궁금합니다. \n\n    case \"board/CREATE\":\n      {\n        const new_board_list = [action.board, ...state.board_list];\n        console.log(new_board_list);\n        return { ...state,\n          board_list: new_board_list\n        };\n      }\n\n    case \"board/DELETE\":\n      {\n        const boardlist = state.board_list.filter((l, idx) => {\n          if (idx !== action.board) {\n            return l;\n          }\n        });\n        return {\n          board_list: boardlist\n        };\n      }\n\n    case \"board/UPDATE\":\n      {\n        const boardlist = state.board_list.map((l, idx) => {\n          if (idx === action.board) {\n            return { ...l,\n              completed: true\n            };\n          }\n\n          return l;\n        });\n        return {\n          board_list: boardlist\n        };\n      }\n    //심화 강의에서 const 하고 actioncreators끼리 묶고 export 하는데 여기서는 안해도 괜찮을까요???\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/joonyeonhwang/Downloads/항해99/gaesipan/src/redux/modules/board.js"],"names":["firestore","board_db","collection","LOAD","CREATE","DELETE","UPDATE","initialState","board_list","loadBoard","board","type","createBoard","deleteBoard","updateBoard","loadBoardFB","dispatch","get","then","docs","board_data","forEach","doc","console","log","data","exists","id","addBoardFB","completed","add","docRef","deleteBoardFB","getState","_board_data","delete","catch","error","updateBoardFB","index","result","title","name","contents","update","reducer","state","action","length","new_board_list","boardlist","filter","l","idx","map"],"mappings":"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","sourcesContent":["import { firestore } from \"../../firebase\";\n\nconst board_db = firestore.collection(\"board\");\n\n// configStore.js 만들고 firebase 설치 후 import 시키고 firestore 대쉬보드의 collection 가져오고는 이해함.\n// 리덕스 모듈에서 파이어베이스 호출하고, 리듀서 수정하고, 컴포넌트에 연결하고 하는 순서는 알 거 같다. \n// loadBoardFB라는 호출 함수 강의자료에 맞게 코드 작성하고 위의 순서에 맞게 잘한 거 같은데 에러의 원인을 모르겠다.\n// loadBoardFB로 호출하면 initialstate의 board_list는 삭제해도 될까요? \n\n// Actions\nconst LOAD = \"board/LOAD\";\nconst CREATE = \"board/CREATE\";\nconst DELETE = \"board/DELETE\";\n\nconst UPDATE = \"board/UPDATE\";\n\nconst initialState = {\n  \n  board_list: \n  [],\n};\n\n// Action Creators\nexport const loadBoard = (board) => {\n  return { type: LOAD, board };\n};\n\nexport const createBoard = (board) => {\n  return { type: CREATE, board };\n};\n\nexport const deleteBoard = (board) => {\n  return { type: DELETE, board };\n};\n\nexport const updateBoard = (board) => {\n  return { type: UPDATE, board };\n};\n\n// .orderBy(\"board_id\", \"desc\")\n  export const loadBoardFB = () => {\n  return function (dispatch) {\n\n    board_db.get().then((docs) => {\n      let board_data = [];\n\n      docs.forEach((doc) => {\n      console.log(doc.data());\n        if (doc.exists) {\n          board_data = [...board_data, { id: doc.id, ...doc.data() }];\n          // board_data = [...board_data, { ...doc.data() }];\n        }\n      });\n\n      console.log(board_data,'loadBoardFB');\n      dispatch(loadBoard(board_data));\n      // console.log(getState().board);\n    });\n  };\n};          \n\nexport const addBoardFB = (board) => {\n  return function (dispatch) {\n    // console.log(board);\n    let board_data = { ...board, completed: false };\n    console.log(board_data);\n\n    board_db.add(board_data).then(docRef => {\n      board_data = { ...board_data, id: docRef.id };\n\n      dispatch(createBoard(board_data));\n    })\n  }\n}\n\nexport const deleteBoardFB = (board) => {\n  return function (dispatch, getState){\n    const _board_data = getState().board.board_list[board];\n\n    if(!_board_data.id){\n      return;\n    }\n\n    board_db.doc(_board_data.id).delete().then(docRef => {\n      dispatch(deleteBoard(board));\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n}\n\nexport const updateBoardFB = (board, index) => {\n  return function(dispatch, getState){\n    console.log(board, index);\n    const _board_data = getState().board.board_list[index];\n\n    let board_data = {..._board_data};\n    console.log(board_data);\n  // _bucket_data.id가 이 함수에서 나가라 끝내라\n    if(!_board_data.id){\n      return;\n    }\n\n    const result = {\n      title: board.title,\n      name: board.name,\n      contents: board.contents,\n      completed: true\n    };\n    console.log(result);\n    console.log(_board_data.id);\n    board_db.doc(_board_data.id).update(result).then(docRef => {\n      dispatch(updateBoard(index));\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n}\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"board/LOAD\": { \n        console.log(action.board);\n      if (action.board.length > 0) {\n            return { board_list: action.board};\n        }\n        return state;\n    }\n     // new_board_list처럼 action...과 state 순서 바꾸었더니 메인페이지에서 최신순으로 잘 나왔습니다. 이유가 궁금합니다. \n    case \"board/CREATE\": {\n      const new_board_list = [ action.board, ...state.board_list ];\n      console.log(new_board_list);\n      return { ...state, board_list: new_board_list};\n    }\n\n    case \"board/DELETE\": {\n      const boardlist = state.board_list.filter((l, idx) => {\n        if (idx !== action.board) {\n          return l;\n        }\n      });\n      return { board_list: boardlist };\n    }\n\n    case \"board/UPDATE\": {\n      const boardlist = state.board_list.map((l, idx) => {\n        if (idx === action.board) {\n\n          return { ...l, completed: true };\n        }\n\n        return l;\n      });\n\n      return { board_list: boardlist };\n    }\n\n    //심화 강의에서 const 하고 actioncreators끼리 묶고 export 하는데 여기서는 안해도 괜찮을까요???\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}